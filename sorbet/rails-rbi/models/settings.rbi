# This is an autogenerated file for dynamic methods in Settings
# Please rerun bundle exec rake rails_rbi:models[Settings] to regenerate.

# typed: strong
module Settings::EnumInstanceMethods
  sig { returns(T::Boolean) }
  def None?; end

  sig { void }
  def None!; end

  sig { returns(T::Boolean) }
  def AppleMusic?; end

  sig { void }
  def AppleMusic!; end

  sig { returns(T::Boolean) }
  def Soundcloud?; end

  sig { void }
  def Soundcloud!; end

  sig { returns(T::Boolean) }
  def Spotify?; end

  sig { void }
  def Spotify!; end

  sig { returns(T::Boolean) }
  def Tidal?; end

  sig { void }
  def Tidal!; end

  sig { returns(T::Boolean) }
  def YoutubeMusic?; end

  sig { void }
  def YoutubeMusic!; end
end

module Settings::ActiveRelation_WhereNot
  sig { params(opts: T.untyped, rest: T.untyped).returns(T.self_type) }
  def not(opts, *rest); end
end

module Settings::GeneratedAttributeMethods
  sig { returns(ActiveSupport::TimeWithZone) }
  def created_at; end

  sig { params(value: T.any(Date, Time, ActiveSupport::TimeWithZone)).void }
  def created_at=(value); end

  sig { returns(T::Boolean) }
  def created_at?; end

  sig { returns(Integer) }
  def id; end

  sig { params(value: T.any(Numeric, ActiveSupport::Duration)).void }
  def id=(value); end

  sig { returns(T::Boolean) }
  def id?; end

  sig { returns(T::Boolean) }
  def redirect?; end

  sig { returns(ActiveSupport::TimeWithZone) }
  def updated_at; end

  sig { params(value: T.any(Date, Time, ActiveSupport::TimeWithZone)).void }
  def updated_at=(value); end

  sig { returns(T::Boolean) }
  def updated_at?; end

  sig { returns(String) }
  def visitor_id; end

  sig { params(value: T.any(String, Symbol)).void }
  def visitor_id=(value); end

  sig { returns(T::Boolean) }
  def visitor_id?; end
end

module Settings::CustomFinderMethods
  sig { params(limit: Integer).returns(T::Array[Settings]) }
  def first_n(limit); end

  sig { params(limit: Integer).returns(T::Array[Settings]) }
  def last_n(limit); end

  sig { params(args: T::Array[T.any(Integer, String)]).returns(T::Array[Settings]) }
  def find_n(*args); end

  sig { params(id: T.nilable(Integer)).returns(T.nilable(Settings)) }
  def find_by_id(id); end

  sig { params(id: Integer).returns(Settings) }
  def find_by_id!(id); end
end

class Settings < ApplicationRecord
  include Settings::EnumInstanceMethods
  include Settings::GeneratedAttributeMethods
  extend Settings::CustomFinderMethods
  extend Settings::QueryMethodsReturningRelation
  RelationType = T.type_alias { T.any(Settings::ActiveRecord_Relation, Settings::ActiveRecord_Associations_CollectionProxy, Settings::ActiveRecord_AssociationRelation) }

  sig { returns(T::Hash[T.any(String, Symbol), String]) }
  def self.redirects; end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_Relation) }
  def self.AppleMusic(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_Relation) }
  def self.None(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_Relation) }
  def self.Soundcloud(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_Relation) }
  def self.Spotify(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_Relation) }
  def self.Tidal(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_Relation) }
  def self.YoutubeMusic(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_Relation) }
  def self.not_AppleMusic(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_Relation) }
  def self.not_None(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_Relation) }
  def self.not_Soundcloud(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_Relation) }
  def self.not_Spotify(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_Relation) }
  def self.not_Tidal(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_Relation) }
  def self.not_YoutubeMusic(*args); end

  sig { returns(Settings::Redirect) }
  def typed_redirect; end

  sig { params(value: Settings::Redirect).void }
  def typed_redirect=(value); end

  class Redirect < T::Enum
    enums do
      None = new(%q{None})
      AppleMusic = new(%q{AppleMusic})
      Soundcloud = new(%q{Soundcloud})
      Spotify = new(%q{Spotify})
      Tidal = new(%q{Tidal})
      YoutubeMusic = new(%q{YoutubeMusic})
    end

  end
end

class Settings::ActiveRecord_Relation < ActiveRecord::Relation
  include Settings::ActiveRelation_WhereNot
  include Settings::CustomFinderMethods
  include Settings::QueryMethodsReturningRelation
  Elem = type_member(fixed: Settings)

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_Relation) }
  def AppleMusic(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_Relation) }
  def None(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_Relation) }
  def Soundcloud(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_Relation) }
  def Spotify(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_Relation) }
  def Tidal(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_Relation) }
  def YoutubeMusic(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_Relation) }
  def not_AppleMusic(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_Relation) }
  def not_None(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_Relation) }
  def not_Soundcloud(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_Relation) }
  def not_Spotify(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_Relation) }
  def not_Tidal(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_Relation) }
  def not_YoutubeMusic(*args); end
end

class Settings::ActiveRecord_AssociationRelation < ActiveRecord::AssociationRelation
  include Settings::ActiveRelation_WhereNot
  include Settings::CustomFinderMethods
  include Settings::QueryMethodsReturningAssociationRelation
  Elem = type_member(fixed: Settings)

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_AssociationRelation) }
  def AppleMusic(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_AssociationRelation) }
  def None(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_AssociationRelation) }
  def Soundcloud(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_AssociationRelation) }
  def Spotify(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_AssociationRelation) }
  def Tidal(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_AssociationRelation) }
  def YoutubeMusic(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_AssociationRelation) }
  def not_AppleMusic(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_AssociationRelation) }
  def not_None(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_AssociationRelation) }
  def not_Soundcloud(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_AssociationRelation) }
  def not_Spotify(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_AssociationRelation) }
  def not_Tidal(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_AssociationRelation) }
  def not_YoutubeMusic(*args); end
end

class Settings::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  include Settings::CustomFinderMethods
  include Settings::QueryMethodsReturningAssociationRelation
  Elem = type_member(fixed: Settings)

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_AssociationRelation) }
  def AppleMusic(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_AssociationRelation) }
  def None(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_AssociationRelation) }
  def Soundcloud(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_AssociationRelation) }
  def Spotify(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_AssociationRelation) }
  def Tidal(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_AssociationRelation) }
  def YoutubeMusic(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_AssociationRelation) }
  def not_AppleMusic(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_AssociationRelation) }
  def not_None(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_AssociationRelation) }
  def not_Soundcloud(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_AssociationRelation) }
  def not_Spotify(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_AssociationRelation) }
  def not_Tidal(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_AssociationRelation) }
  def not_YoutubeMusic(*args); end

  sig { params(records: T.any(Settings, T::Array[Settings])).returns(T.self_type) }
  def <<(*records); end

  sig { params(records: T.any(Settings, T::Array[Settings])).returns(T.self_type) }
  def append(*records); end

  sig { params(records: T.any(Settings, T::Array[Settings])).returns(T.self_type) }
  def push(*records); end

  sig { params(records: T.any(Settings, T::Array[Settings])).returns(T.self_type) }
  def concat(*records); end
end

module Settings::QueryMethodsReturningRelation
  sig { returns(Settings::ActiveRecord_Relation) }
  def all; end

  sig { params(block: T.nilable(T.proc.void)).returns(Settings::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_Relation) }
  def reselect(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_Relation) }
  def order(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_Relation) }
  def reorder(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_Relation) }
  def group(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_Relation) }
  def limit(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_Relation) }
  def offset(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_Relation) }
  def joins(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_Relation) }
  def left_joins(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_Relation) }
  def left_outer_joins(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_Relation) }
  def where(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_Relation) }
  def rewhere(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_Relation) }
  def preload(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_Relation) }
  def extract_associated(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_Relation) }
  def eager_load(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_Relation) }
  def includes(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_Relation) }
  def from(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_Relation) }
  def lock(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_Relation) }
  def readonly(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_Relation) }
  def or(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_Relation) }
  def having(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_Relation) }
  def create_with(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_Relation) }
  def distinct(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_Relation) }
  def references(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_Relation) }
  def none(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_Relation) }
  def unscope(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_Relation) }
  def optimizer_hints(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_Relation) }
  def merge(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_Relation) }
  def except(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_Relation) }
  def only(*args); end

  sig { params(block: T.proc.params(e: Settings).returns(T::Boolean)).returns(T::Array[Settings]) }
  def select(&block); end

  sig { params(args: T.any(String, Symbol, T::Array[T.any(String, Symbol)])).returns(Settings::ActiveRecord_Relation) }
  def select_columns(*args); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Settings::ActiveRecord_Relation) }
  def extending(*args, &block); end

  sig do
    params(
      of: T.nilable(Integer),
      start: T.nilable(Integer),
      finish: T.nilable(Integer),
      load: T.nilable(T::Boolean),
      error_on_ignore: T.nilable(T::Boolean),
      block: T.nilable(T.proc.params(e: Settings::ActiveRecord_Relation).void)
    ).returns(ActiveRecord::Batches::BatchEnumerator)
  end
  def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, &block); end
end

module Settings::QueryMethodsReturningAssociationRelation
  sig { returns(Settings::ActiveRecord_AssociationRelation) }
  def all; end

  sig { params(block: T.nilable(T.proc.void)).returns(Settings::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_AssociationRelation) }
  def reselect(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_AssociationRelation) }
  def order(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_AssociationRelation) }
  def reorder(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_AssociationRelation) }
  def group(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_AssociationRelation) }
  def limit(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_AssociationRelation) }
  def offset(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_AssociationRelation) }
  def joins(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_AssociationRelation) }
  def left_joins(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_AssociationRelation) }
  def left_outer_joins(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_AssociationRelation) }
  def where(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_AssociationRelation) }
  def rewhere(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_AssociationRelation) }
  def preload(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_AssociationRelation) }
  def extract_associated(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_AssociationRelation) }
  def eager_load(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_AssociationRelation) }
  def includes(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_AssociationRelation) }
  def from(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_AssociationRelation) }
  def lock(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_AssociationRelation) }
  def readonly(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_AssociationRelation) }
  def or(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_AssociationRelation) }
  def having(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_AssociationRelation) }
  def create_with(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_AssociationRelation) }
  def distinct(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_AssociationRelation) }
  def references(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_AssociationRelation) }
  def none(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_AssociationRelation) }
  def unscope(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_AssociationRelation) }
  def optimizer_hints(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_AssociationRelation) }
  def merge(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_AssociationRelation) }
  def except(*args); end

  sig { params(args: T.untyped).returns(Settings::ActiveRecord_AssociationRelation) }
  def only(*args); end

  sig { params(block: T.proc.params(e: Settings).returns(T::Boolean)).returns(T::Array[Settings]) }
  def select(&block); end

  sig { params(args: T.any(String, Symbol, T::Array[T.any(String, Symbol)])).returns(Settings::ActiveRecord_AssociationRelation) }
  def select_columns(*args); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Settings::ActiveRecord_AssociationRelation) }
  def extending(*args, &block); end

  sig do
    params(
      of: T.nilable(Integer),
      start: T.nilable(Integer),
      finish: T.nilable(Integer),
      load: T.nilable(T::Boolean),
      error_on_ignore: T.nilable(T::Boolean),
      block: T.nilable(T.proc.params(e: Settings::ActiveRecord_AssociationRelation).void)
    ).returns(ActiveRecord::Batches::BatchEnumerator)
  end
  def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, &block); end
end
