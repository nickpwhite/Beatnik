# This is an autogenerated file for dynamic methods in Music
# Please rerun bundle exec rake rails_rbi:models[Music] to regenerate.

# typed: strict
module Music::EnumInstanceMethods
  sig { returns(T::Boolean) }
  def AppleMusic?; end

  sig { void }
  def AppleMusic!; end

  sig { returns(T::Boolean) }
  def Soundcloud?; end

  sig { void }
  def Soundcloud!; end

  sig { returns(T::Boolean) }
  def Spotify?; end

  sig { void }
  def Spotify!; end

  sig { returns(T::Boolean) }
  def Tidal?; end

  sig { void }
  def Tidal!; end

  sig { returns(T::Boolean) }
  def YoutubeMusic?; end

  sig { void }
  def YoutubeMusic!; end
end

module Music::ActiveRelation_WhereNot
  sig { params(opts: T.untyped, rest: T.untyped).returns(T.self_type) }
  def not(opts, *rest); end
end

module Music::GeneratedAttributeMethods
  sig { returns(String) }
  def album; end

  sig { params(value: T.any(String, Symbol)).void }
  def album=(value); end

  sig { returns(T::Boolean) }
  def album?; end

  sig { returns(T.nilable(String)) }
  def apple_url; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def apple_url=(value); end

  sig { returns(T::Boolean) }
  def apple_url?; end

  sig { returns(String) }
  def artist; end

  sig { params(value: T.any(String, Symbol)).void }
  def artist=(value); end

  sig { returns(T::Boolean) }
  def artist?; end

  sig { returns(String) }
  def artwork; end

  sig { params(value: T.any(String, Symbol)).void }
  def artwork=(value); end

  sig { returns(T::Boolean) }
  def artwork?; end

  sig { returns(T.nilable(String)) }
  def gpm_url; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def gpm_url=(value); end

  sig { returns(T::Boolean) }
  def gpm_url?; end

  sig { returns(Integer) }
  def id; end

  sig { params(value: T.any(Numeric, ActiveSupport::Duration)).void }
  def id=(value); end

  sig { returns(T::Boolean) }
  def id?; end

  sig { returns(Integer) }
  def match_rating; end

  sig { params(value: T.any(Numeric, ActiveSupport::Duration)).void }
  def match_rating=(value); end

  sig { returns(T::Boolean) }
  def match_rating?; end

  sig { returns(String) }
  def music_type; end

  sig { params(value: T.any(String, Symbol)).void }
  def music_type=(value); end

  sig { returns(T::Boolean) }
  def music_type?; end

  sig { returns(String) }
  def name; end

  sig { params(value: T.any(String, Symbol)).void }
  def name=(value); end

  sig { returns(T::Boolean) }
  def name?; end

  sig { returns(T.nilable(String)) }
  def soundcloud_url; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def soundcloud_url=(value); end

  sig { returns(T::Boolean) }
  def soundcloud_url?; end

  sig { returns(T::Boolean) }
  def source?; end

  sig { returns(T.nilable(String)) }
  def spotify_url; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def spotify_url=(value); end

  sig { returns(T::Boolean) }
  def spotify_url?; end

  sig { returns(T.nilable(String)) }
  def tidal_url; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def tidal_url=(value); end

  sig { returns(T::Boolean) }
  def tidal_url?; end

  sig { returns(T.nilable(String)) }
  def ytm_url; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def ytm_url=(value); end

  sig { returns(T::Boolean) }
  def ytm_url?; end
end

module Music::CustomFinderMethods
  sig { params(limit: Integer).returns(T::Array[Music]) }
  def first_n(limit); end

  sig { params(limit: Integer).returns(T::Array[Music]) }
  def last_n(limit); end

  sig { params(args: T::Array[T.any(Integer, String)]).returns(T::Array[Music]) }
  def find_n(*args); end

  sig { params(id: Integer).returns(T.nilable(Music)) }
  def find_by_id(id); end

  sig { params(id: Integer).returns(Music) }
  def find_by_id!(id); end
end

class Music < ApplicationRecord
  include Music::EnumInstanceMethods
  include Music::GeneratedAttributeMethods
  extend Music::CustomFinderMethods
  extend Music::QueryMethodsReturningRelation
  RelationType = T.type_alias { T.any(Music::ActiveRecord_Relation, Music::ActiveRecord_Associations_CollectionProxy, Music::ActiveRecord_AssociationRelation) }

  sig { returns(T::Hash[T.any(String, Symbol), Symbol]) }
  def self.sources; end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_Relation) }
  def self.AppleMusic(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_Relation) }
  def self.Soundcloud(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_Relation) }
  def self.Spotify(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_Relation) }
  def self.Tidal(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_Relation) }
  def self.YoutubeMusic(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_Relation) }
  def self.not_AppleMusic(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_Relation) }
  def self.not_Soundcloud(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_Relation) }
  def self.not_Spotify(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_Relation) }
  def self.not_Tidal(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_Relation) }
  def self.not_YoutubeMusic(*args); end

  sig { returns(T.nilable(Music::Source)) }
  def typed_source; end

  sig { params(value: T.nilable(Music::Source)).void }
  def typed_source=(value); end

  class Source < T::Enum
    enums do
      AppleMusic = new(%q{AppleMusic})
      Soundcloud = new(%q{Soundcloud})
      Spotify = new(%q{Spotify})
      Tidal = new(%q{Tidal})
      YoutubeMusic = new(%q{YoutubeMusic})
    end

  end
end

class Music::ActiveRecord_Relation < ActiveRecord::Relation
  include Music::ActiveRelation_WhereNot
  include Music::CustomFinderMethods
  include Music::QueryMethodsReturningRelation
  Elem = type_member(fixed: Music)

  sig { params(args: T.untyped).returns(Music::ActiveRecord_Relation) }
  def AppleMusic(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_Relation) }
  def Soundcloud(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_Relation) }
  def Spotify(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_Relation) }
  def Tidal(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_Relation) }
  def YoutubeMusic(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_Relation) }
  def not_AppleMusic(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_Relation) }
  def not_Soundcloud(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_Relation) }
  def not_Spotify(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_Relation) }
  def not_Tidal(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_Relation) }
  def not_YoutubeMusic(*args); end
end

class Music::ActiveRecord_AssociationRelation < ActiveRecord::AssociationRelation
  include Music::ActiveRelation_WhereNot
  include Music::CustomFinderMethods
  include Music::QueryMethodsReturningAssociationRelation
  Elem = type_member(fixed: Music)

  sig { params(args: T.untyped).returns(Music::ActiveRecord_AssociationRelation) }
  def AppleMusic(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_AssociationRelation) }
  def Soundcloud(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_AssociationRelation) }
  def Spotify(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_AssociationRelation) }
  def Tidal(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_AssociationRelation) }
  def YoutubeMusic(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_AssociationRelation) }
  def not_AppleMusic(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_AssociationRelation) }
  def not_Soundcloud(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_AssociationRelation) }
  def not_Spotify(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_AssociationRelation) }
  def not_Tidal(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_AssociationRelation) }
  def not_YoutubeMusic(*args); end
end

class Music::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  include Music::CustomFinderMethods
  include Music::QueryMethodsReturningAssociationRelation
  Elem = type_member(fixed: Music)

  sig { params(args: T.untyped).returns(Music::ActiveRecord_AssociationRelation) }
  def AppleMusic(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_AssociationRelation) }
  def Soundcloud(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_AssociationRelation) }
  def Spotify(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_AssociationRelation) }
  def Tidal(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_AssociationRelation) }
  def YoutubeMusic(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_AssociationRelation) }
  def not_AppleMusic(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_AssociationRelation) }
  def not_Soundcloud(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_AssociationRelation) }
  def not_Spotify(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_AssociationRelation) }
  def not_Tidal(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_AssociationRelation) }
  def not_YoutubeMusic(*args); end

  sig { params(records: T.any(Music, T::Array[Music])).returns(T.self_type) }
  def <<(*records); end

  sig { params(records: T.any(Music, T::Array[Music])).returns(T.self_type) }
  def append(*records); end

  sig { params(records: T.any(Music, T::Array[Music])).returns(T.self_type) }
  def push(*records); end

  sig { params(records: T.any(Music, T::Array[Music])).returns(T.self_type) }
  def concat(*records); end
end

module Music::QueryMethodsReturningRelation
  sig { returns(Music::ActiveRecord_Relation) }
  def all; end

  sig { params(block: T.nilable(T.proc.void)).returns(Music::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_Relation) }
  def select(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_Relation) }
  def reselect(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_Relation) }
  def order(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_Relation) }
  def reorder(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_Relation) }
  def group(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_Relation) }
  def limit(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_Relation) }
  def offset(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_Relation) }
  def joins(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_Relation) }
  def left_joins(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_Relation) }
  def left_outer_joins(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_Relation) }
  def where(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_Relation) }
  def rewhere(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_Relation) }
  def preload(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_Relation) }
  def extract_associated(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_Relation) }
  def eager_load(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_Relation) }
  def includes(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_Relation) }
  def from(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_Relation) }
  def lock(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_Relation) }
  def readonly(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_Relation) }
  def or(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_Relation) }
  def having(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_Relation) }
  def create_with(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_Relation) }
  def distinct(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_Relation) }
  def references(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_Relation) }
  def none(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_Relation) }
  def unscope(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_Relation) }
  def optimizer_hints(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_Relation) }
  def merge(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_Relation) }
  def except(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_Relation) }
  def only(*args); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Music::ActiveRecord_Relation) }
  def extending(*args, &block); end

  sig do
    params(
      of: T.nilable(Integer),
      start: T.nilable(Integer),
      finish: T.nilable(Integer),
      load: T.nilable(T::Boolean),
      error_on_ignore: T.nilable(T::Boolean),
      block: T.nilable(T.proc.params(e: Music::ActiveRecord_Relation).void)
    ).returns(REXML::SyncEnumerator)
  end
  def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, &block); end
end

module Music::QueryMethodsReturningAssociationRelation
  sig { returns(Music::ActiveRecord_AssociationRelation) }
  def all; end

  sig { params(block: T.nilable(T.proc.void)).returns(Music::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_AssociationRelation) }
  def select(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_AssociationRelation) }
  def reselect(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_AssociationRelation) }
  def order(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_AssociationRelation) }
  def reorder(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_AssociationRelation) }
  def group(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_AssociationRelation) }
  def limit(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_AssociationRelation) }
  def offset(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_AssociationRelation) }
  def joins(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_AssociationRelation) }
  def left_joins(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_AssociationRelation) }
  def left_outer_joins(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_AssociationRelation) }
  def where(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_AssociationRelation) }
  def rewhere(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_AssociationRelation) }
  def preload(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_AssociationRelation) }
  def extract_associated(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_AssociationRelation) }
  def eager_load(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_AssociationRelation) }
  def includes(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_AssociationRelation) }
  def from(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_AssociationRelation) }
  def lock(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_AssociationRelation) }
  def readonly(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_AssociationRelation) }
  def or(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_AssociationRelation) }
  def having(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_AssociationRelation) }
  def create_with(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_AssociationRelation) }
  def distinct(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_AssociationRelation) }
  def references(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_AssociationRelation) }
  def none(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_AssociationRelation) }
  def unscope(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_AssociationRelation) }
  def optimizer_hints(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_AssociationRelation) }
  def merge(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_AssociationRelation) }
  def except(*args); end

  sig { params(args: T.untyped).returns(Music::ActiveRecord_AssociationRelation) }
  def only(*args); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Music::ActiveRecord_AssociationRelation) }
  def extending(*args, &block); end

  sig do
    params(
      of: T.nilable(Integer),
      start: T.nilable(Integer),
      finish: T.nilable(Integer),
      load: T.nilable(T::Boolean),
      error_on_ignore: T.nilable(T::Boolean),
      block: T.nilable(T.proc.params(e: Music::ActiveRecord_AssociationRelation).void)
    ).returns(REXML::SyncEnumerator)
  end
  def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, &block); end
end
