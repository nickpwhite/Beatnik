# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/excon/all/excon.rbi
#
# excon-0.85.0

module Excon
  def self.connect(url, params = nil, &block); end
  def self.defaults; end
  def self.defaults=(new_defaults); end
  def self.delete(url, params = nil, &block); end
  def self.display_warning(warning); end
  def self.get(url, params = nil, &block); end
  def self.head(url, params = nil, &block); end
  def self.mock; end
  def self.mock=(new_mock); end
  def self.new(url, params = nil); end
  def self.options(url, params = nil, &block); end
  def self.patch(url, params = nil, &block); end
  def self.post(url, params = nil, &block); end
  def self.put(url, params = nil, &block); end
  def self.set_raise_on_warnings!(should_raise); end
  def self.ssl_ca_path; end
  def self.ssl_ca_path=(new_ssl_ca_path); end
  def self.ssl_verify_peer; end
  def self.ssl_verify_peer=(new_ssl_verify_peer); end
  def self.stub(request_params = nil, response_params = nil, &block); end
  def self.stub_for(request_params = nil); end
  def self.stubs; end
  def self.trace(url, params = nil, &block); end
  def self.unstub(request_params = nil); end
end
module Excon::Middleware
end
class Excon::Middleware::Base
  def error_call(datum); end
  def initialize(stack); end
  def request_call(datum); end
  def response_call(datum); end
  def self.valid_parameter_keys; end
end
class Excon::Middleware::Expects < Excon::Middleware::Base
  def response_call(datum); end
  def self.valid_parameter_keys; end
end
class Excon::Middleware::Idempotent < Excon::Middleware::Base
  def error_call(datum); end
  def request_call(datum); end
  def self.valid_parameter_keys; end
end
class Excon::Middleware::Instrumentor < Excon::Middleware::Base
  def error_call(datum); end
  def request_call(datum); end
  def response_call(datum); end
  def self.valid_parameter_keys; end
end
class Excon::Middleware::Mock < Excon::Middleware::Base
  def request_call(datum); end
  def self.valid_parameter_keys; end
end
class Excon::Middleware::ResponseParser < Excon::Middleware::Base
  def response_call(datum); end
end
class Excon::Error < StandardError
  def self.status_error(request, response); end
  def self.status_errors; end
end
class Excon::Error::StubNotFound < Excon::Error
end
class Excon::Error::InvalidStub < Excon::Error
end
class Excon::Error::Warning < Excon::Error
end
class Excon::Error::Socket < Excon::Error
  def initialize(socket_error = nil); end
  def socket_error; end
end
class Excon::Error::Certificate < Excon::Error::Socket
  def initialize(socket_error = nil); end
end
class Excon::Error::InvalidHeaderKey < Excon::Error
end
class Excon::Error::InvalidHeaderValue < Excon::Error
end
class Excon::Error::Timeout < Excon::Error
end
class Excon::Error::ResponseParse < Excon::Error
end
class Excon::Error::ProxyConnectionError < Excon::Error
  def initialize(msg, request = nil, response = nil); end
  def request; end
  def response; end
end
class Excon::Error::ProxyParse < Excon::Error
end
class Excon::Error::TooManyRedirects < Excon::Error
end
class Excon::Error::HTTPStatus < Excon::Error
  def initialize(msg, request = nil, response = nil); end
  def request; end
  def response; end
end
class Excon::Error::Informational < Excon::Error::HTTPStatus
end
class Excon::Error::Success < Excon::Error::HTTPStatus
end
class Excon::Error::Redirection < Excon::Error::HTTPStatus
end
class Excon::Error::Client < Excon::Error::HTTPStatus
end
class Excon::Error::Server < Excon::Error::HTTPStatus
end
class Excon::Error::Continue < Excon::Error::Informational
end
class Excon::Error::SwitchingProtocols < Excon::Error::Informational
end
class Excon::Error::OK < Excon::Error::Success
end
class Excon::Error::Created < Excon::Error::Success
end
class Excon::Error::Accepted < Excon::Error::Success
end
class Excon::Error::NonAuthoritativeInformation < Excon::Error::Success
end
class Excon::Error::NoContent < Excon::Error::Success
end
class Excon::Error::ResetContent < Excon::Error::Success
end
class Excon::Error::PartialContent < Excon::Error::Success
end
class Excon::Error::MultipleChoices < Excon::Error::Redirection
end
class Excon::Error::MovedPermanently < Excon::Error::Redirection
end
class Excon::Error::Found < Excon::Error::Redirection
end
class Excon::Error::SeeOther < Excon::Error::Redirection
end
class Excon::Error::NotModified < Excon::Error::Redirection
end
class Excon::Error::UseProxy < Excon::Error::Redirection
end
class Excon::Error::TemporaryRedirect < Excon::Error::Redirection
end
class Excon::Error::BadRequest < Excon::Error::Client
end
class Excon::Error::Unauthorized < Excon::Error::Client
end
class Excon::Error::PaymentRequired < Excon::Error::Client
end
class Excon::Error::Forbidden < Excon::Error::Client
end
class Excon::Error::NotFound < Excon::Error::Client
end
class Excon::Error::MethodNotAllowed < Excon::Error::Client
end
class Excon::Error::NotAcceptable < Excon::Error::Client
end
class Excon::Error::ProxyAuthenticationRequired < Excon::Error::Client
end
class Excon::Error::RequestTimeout < Excon::Error::Client
end
class Excon::Error::Conflict < Excon::Error::Client
end
class Excon::Error::Gone < Excon::Error::Client
end
class Excon::Error::LengthRequired < Excon::Error::Client
end
class Excon::Error::PreconditionFailed < Excon::Error::Client
end
class Excon::Error::RequestEntityTooLarge < Excon::Error::Client
end
class Excon::Error::RequestURITooLong < Excon::Error::Client
end
class Excon::Error::UnsupportedMediaType < Excon::Error::Client
end
class Excon::Error::RequestedRangeNotSatisfiable < Excon::Error::Client
end
class Excon::Error::ExpectationFailed < Excon::Error::Client
end
class Excon::Error::UnprocessableEntity < Excon::Error::Client
end
class Excon::Error::TooManyRequests < Excon::Error::Client
end
class Excon::Error::InternalServerError < Excon::Error::Server
end
class Excon::Error::NotImplemented < Excon::Error::Server
end
class Excon::Error::BadGateway < Excon::Error::Server
end
class Excon::Error::ServiceUnavailable < Excon::Error::Server
end
class Excon::Error::GatewayTimeout < Excon::Error::Server
end
module Excon::Errors
  def self.status_error(request, response); end
end
module Excon::Utils
  def binary_encode(string); end
  def connection_uri(datum = nil); end
  def escape_uri(str); end
  def headers_hash_to_s(headers); end
  def port_string(datum); end
  def query_string(datum); end
  def redact(datum); end
  def request_uri(datum); end
  def split_header_value(str); end
  def unescape_form(str); end
  def unescape_uri(str); end
  extend Excon::Utils
end
class Excon::Connection
  def batch_requests(pipeline_params, limit = nil); end
  def connect(params = nil, &block); end
  def connection; end
  def connection=(new_params); end
  def data; end
  def delete(params = nil, &block); end
  def detect_content_length(body); end
  def error_call(datum); end
  def get(params = nil, &block); end
  def head(params = nil, &block); end
  def initialize(params = nil); end
  def inspect; end
  def logger; end
  def logger=(logger); end
  def options(params = nil, &block); end
  def params; end
  def params=(new_params); end
  def patch(params = nil, &block); end
  def post(params = nil, &block); end
  def proxy; end
  def proxy=(new_proxy); end
  def proxy_from_env; end
  def proxy_match_host_port(host, port); end
  def put(params = nil, &block); end
  def raise_socket_error(error); end
  def request(params = nil, &block); end
  def request_call(datum); end
  def requests(pipeline_params); end
  def reset; end
  def response(datum = nil); end
  def response_call(datum); end
  def retry_limit; end
  def retry_limit=(new_retry_limit); end
  def setup_proxy; end
  def socket(datum = nil); end
  def sockets; end
  def trace(params = nil, &block); end
  def valid_middleware_keys(middlewares); end
  def valid_request_keys(middlewares); end
  def validate_params(validation, params, middlewares); end
  include Excon::Utils
end
class Excon::Headers < Hash
  def [](key); end
  def []=(key, value); end
  def assoc(obj); end
  def delete(key, &proc); end
  def fetch(key, default = nil, &proc); end
  def has_key?(key); end
  def initialize; end
  def key?(key); end
  def member?(key); end
  def merge!(other_hash); end
  def merge(other_hash); end
  def raw_assoc(arg0); end
  def raw_delete(arg0); end
  def raw_fetch(*arg0); end
  def raw_has_key?(arg0); end
  def raw_include?(arg0); end
  def raw_key?(arg0); end
  def raw_member?(arg0); end
  def raw_merge!(*arg0); end
  def raw_merge(*arg0); end
  def raw_reader(arg0); end
  def raw_rehash; end
  def raw_store(arg0, arg1); end
  def raw_values_at(*arg0); end
  def raw_writer(arg0, arg1); end
  def rehash; end
  def store(key, value); end
  def values_at(*keys); end
end
class Excon::Response
  def [](key); end
  def body; end
  def body=(new_body); end
  def data; end
  def data=(arg0); end
  def get_header(name); end
  def headers; end
  def headers=(new_headers); end
  def host; end
  def initialize(params = nil); end
  def local_address; end
  def local_port; end
  def params; end
  def path; end
  def port; end
  def pp; end
  def reason_phrase; end
  def reason_phrase=(new_reason_phrase); end
  def remote_ip; end
  def remote_ip=(new_remote_ip); end
  def self.parse(socket, datum); end
  def self.parse_headers(socket, datum); end
  def status; end
  def status=(new_status); end
  def status_line; end
  def status_line=(new_status_line); end
end
class Excon::Middleware::Decompress < Excon::Middleware::Base
  def request_call(datum); end
  def response_call(datum); end
end
class Excon::Middleware::EscapePath < Excon::Middleware::Base
  def request_call(datum); end
end
class Excon::Middleware::RedirectFollower < Excon::Middleware::Base
  def get_header(datum, header); end
  def request_call(datum); end
  def response_call(datum); end
  def self.valid_parameter_keys; end
end
class Excon::Middleware::CaptureCookies < Excon::Middleware::Base
  def extract_cookies_from_set_cookie(set_cookie); end
  def get_header(datum, header); end
  def response_call(datum); end
end
class Excon::PrettyPrinter
  def self.pp(io, datum, indent = nil); end
end
class Excon::Socket
  def close(*args, &block); end
  def connect; end
  def data; end
  def data=(arg0); end
  def initialize(data = nil); end
  def legacy_readline; end
  def local_address; end
  def local_port; end
  def params; end
  def params=(new_params); end
  def read(max_length = nil); end
  def read_block(max_length); end
  def read_nonblock(max_length); end
  def readline; end
  def remote_ip; end
  def select_with_timeout(socket, type); end
  def unpacked_sockaddr; end
  def write(data); end
  def write_block(data); end
  def write_nonblock(data); end
  extend Forwardable
  include Excon::Utils
end
class Excon::SSLSocket < Excon::Socket
  def client_cert_data; end
  def client_key_data; end
  def client_key_pass; end
  def connect; end
  def initialize(data = nil); end
end
class Excon::StandardInstrumentor
  def self.instrument(name, params = nil); end
end
class Excon::LoggingInstrumentor
  def self.instrument(name, params = nil); end
end
class Excon::UnixSocket < Excon::Socket
  def connect; end
end
